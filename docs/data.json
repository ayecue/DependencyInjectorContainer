{
    "project": {
        "name": "dependency-injector-container",
        "description": "Tiny library which does dependency injection. Basically same pattern like in AngularJS.",
        "version": "1.1.0",
        "url": "https://github.com/ayecue/DependencyInjectorContainer#readme"
    },
    "files": {
        "main.js": {
            "name": "main.js",
            "modules": {},
            "classes": {
                "DependencyInjectorContainer": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "DependencyInjectorContainer": {
            "name": "DependencyInjectorContainer",
            "shortname": "DependencyInjectorContainer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "main.js",
            "line": 29,
            "description": "Dependency injector container like in AngualarJS.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scope",
                    "description": "Scope for namespaces.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": ""
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "main.js",
            "line": 47,
            "description": "Assert helper.",
            "itemtype": "method",
            "name": "assert",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "condition",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "message",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "class": "DependencyInjectorContainer"
        },
        {
            "file": "main.js",
            "line": 62,
            "description": "Set namespace in scope. Module will be instantly available.",
            "itemtype": "method",
            "name": "set",
            "chainable": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "Module namespace.",
                    "type": "String"
                },
                {
                    "name": "module",
                    "description": "Module to set.",
                    "type": "Object"
                },
                {
                    "name": "override",
                    "description": "Should override namespace if set.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "DependencyInjectorContainer"
        },
        {
            "file": "main.js",
            "line": 84,
            "description": "Extend namespace to scope. Will be injected as soon as load is called.",
            "itemtype": "method",
            "name": "extend",
            "chainable": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "Module namespace.",
                    "type": "String"
                },
                {
                    "name": "dependencies",
                    "description": "Module dependencies.",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "definition",
                    "description": "Module definition block.",
                    "type": "Object"
                }
            ],
            "class": "DependencyInjectorContainer"
        },
        {
            "file": "main.js",
            "line": 108,
            "description": "Receive module. Will automatically initialize module with all it dependencies if it's not already loaded.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "namespace",
                    "description": "Module namespace.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DependencyInjectorContainer"
        },
        {
            "file": "main.js",
            "line": 126,
            "description": "Evaluate defenition.",
            "itemtype": "method",
            "name": "evalDefinition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "namespace",
                    "description": "Module namespace.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DependencyInjectorContainer"
        },
        {
            "file": "main.js",
            "line": 166,
            "description": "Load one defenition with all it dependencies. (Use this if you just want to load certain modules and not all)\nIf you want to load via namespace use .get instead.",
            "itemtype": "method",
            "name": "loadDefinition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "definition",
                    "description": "Definition block.",
                    "type": "Function"
                },
                {
                    "name": "excludes",
                    "description": "Modules to exclude from load.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "DependencyInjectorContainer"
        },
        {
            "file": "main.js",
            "line": 219,
            "description": "Initialize all defenitions.",
            "itemtype": "method",
            "name": "load",
            "chainable": 1,
            "class": "DependencyInjectorContainer"
        }
    ],
    "warnings": []
}